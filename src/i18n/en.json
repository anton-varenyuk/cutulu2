{
	"added": "Added",
	"flyweight": "Flyweight",
	"flyweight_disclaimer": "Flyweight is a structural design pattern that lets you fit more objects into the available amount of RAM by sharing common parts of state between multiple objects instead of keeping all of the data in each object.",
	"bridge": "Bridge",
	"bridge_disclaimer": "Bridge is a structural design pattern that lets you split a large class or a set of closely related classes into two separate hierarchies—abstraction and implementation—which can be developed independently of each other.",
	"prototype": "Prototype",
	"prototype_disclaimer": "Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their classes.",
	"composite": "Composite",
	"composite_disclaimer": "Composite is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects.",
	"currying": "Currying",
	"currying_disclaimer": "Currying is the technique of translating a function that takes multiple arguments into a sequence of families of functions, each taking a single argument.",
	"proxy": "Proxy",
	"proxy_disclaimer": "Proxy is a structural design pattern that lets you provide a substitute or placeholder for another object. A proxy controls access to the original object, allowing you to perform something either before or after the request gets through to the original object.\n\n",
	"chainOfResponsibility": "Chain of Responsibility",
	"chainOfResponsibility_disclaimer": "Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.",
	"visitor": "Visitor",
	"visitor_disclaimer": "Visitor is a behavioral design pattern that lets you separate algorithms from the objects on which they operate.",
	"observable": "Observer",
	"observable_disclaimer": "Observer is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they’re observing.",
	"mediator": "Mediator",
	"mediator_disclaimer": "Mediator is a behavioral design pattern that lets you reduce chaotic dependencies between objects. The pattern restricts direct communications between the objects and forces them to collaborate only via a mediator object.\n\n",
	"facade": "Facade",
	"facade_disclaimer": "Facade is a structural design pattern that provides a simplified interface to a library, a framework, or any other complex set of classes.",
	"decorator": "Decorator",
	"decorator_disclaimer": "Decorator is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.",
	"builder": "Builder",
	"builder_disclaimer": "Builder is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.",
	"abstractFactory": "Abstract Factory",
	"abstractFactory_disclaimer": "Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes.",
	"factory": "Factory Method",
	"factory_disclaimer": "Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.",
	"singleton": "Singleton",
	"singleton_disclaimer": "Singleton is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance.",
	"hashFunction": "Hash Function",
	"hashFunction_disclaimer": "A hash function is any function that can be used to map data of arbitrary size to fixed-size values, though there are some hash functions that support variable length output.",
	"bubbleSorting": "Bubble sort",
	"bubbleSorting_disclaimer": "Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order (ascending or descending arrangement). The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.",
	"insertionSorting": "Insertion sort",
	"insertionSorting_disclaimer": "Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.",
	"bucketSorting": "Bucket sort",
	"bucketSorting_disclaimer": "Bucket sort, or bin sort, is a sorting algorithm that works by distributing the elements of an array into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm."
}
